name: issue automic create
on:
#   push:
#     branches: [ main ]
#     paths: 
#       - 'offersku.json'
  workflow_dispatch:
  
jobs:
  createIssue:
    env:
      GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      name: Check out code
    - name: handle-list
      run: |
        milestone=$(cat offersku.json | jq '.mailstone')
        allMilestones=$(curl \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{github.token}}"\
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{github.repository_owner}}/Practice/milestones | jq  '.[] | .title')
        
        createFlag="true"
        for item in $allMilestones;do
          if [[ $item == $milestone ]];then
            createFlag="false"
            echo "milestone exist"
            break
          fi 
        done
        if [[ $createFlag == "true" ]];then
          echo "create new milestone"
          curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{github.token}}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{github.repository_owner}}/Practice/milestones \
            -d '{"title":'$milestone',"state":"open"}'
        fi
        
        length=$(echo $list | jq '.|length')  
        list=$(jq "[.task[] | {appname:.appname,version:.version[],distribution:.distribution[],platform:.platform[],os:.os[],assignees:.assignees}]" offersku.json)
        length=$(echo $list | jq '.|length')
        map=(["童颖佳"]="Tooy1011" ["张露"]="zl-go")
        for ((index=0;index<$length;index++));do
          appname=$(echo $list | jq -r ".[$index].appname")
          version=$(echo $list | jq -r ".[$index].version")
          distribution=$(echo $list | jq -r ".[$index].distribution")
          platform=$(echo $list | jq -r ".[$index].platform")
          os=$(echo $list | jq -r ".[$index].os")
          assignee=${map[$(echo $list | jq -r ".[$index].assignees")]}
          stone=$(echo $milestone | sed 's/\"//g')
          issue_number=$(gh issue create --assignee $assignee --title "$appname$version $distribution on $os on $platform" --body-file .github/ISSUE_TEMPLATE/offersku.md --milestone $stone | awk -F "/" '{print $NF}')
          issue_id=$(curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{github.token}}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{github.repository_owner}}/Practice/issues/$issue_number | jq -r .node_id)
          echo $issue_id
          project_id=$(curl --request POST \
            --url https://api.github.com/graphql \
            --header 'Authorization: Bearer ${{ secrets.ACCESS_PROJECT }}' \
            --data '{"query":"query{user(login: \"${{github.repository_owner}}\") {projectV2(number: 1){id}}}"}' | jq -r .data.user.projectV2.id)
          echo $project_id
          item_id=$(curl --request POST \
            --url https://api.github.com/graphql \
            --header 'Authorization: Bearer ${{ secrets.ACCESS_PROJECT }}' \
            --data '{"query":"mutation {addProjectV2ItemById(input: {projectId: \"'$project_id'\" contentId: \"'$issue_id'\"}) {item {id}}}"}' | jq -r '.data.addProjectV2ItemById.item.id')
          echo $item_id
          
          echo $(curl --request POST \
            --url https://api.github.com/graphql \
            --header 'Authorization: Bearer ${{ secrets.ACCESS_PROJECT }}' \
            --data '{"query":"query{ node(id: \"'$project_id'\") { ... on ProjectV2 { items(first: 20) { nodes{ id fieldValues(first: 8) { nodes{ ... on ProjectV2ItemFieldTextValue { text field { ... on ProjectV2FieldCommon {  name }}} ... on ProjectV2ItemFieldDateValue { date field { ... on ProjectV2FieldCommon { name } } } ... on ProjectV2ItemFieldSingleSelectValue { name field { ... on ProjectV2FieldCommon { name }}}}} content{ ... on DraftIssue { title body } ...on Issue { title assignees(first: 10) { nodes{ login }}} ...on PullRequest { title assignees(first: 10) { nodes{ login }}}}}}}}}"}')
          
          node=$(curl --request POST \
            --url https://api.github.com/graphql \
            --header 'Authorization: Bearer ${{ secrets.ACCESS_PROJECT }}' \
            --data '{"query":"query{ node(id: \"'$project_id'\") { ... on ProjectV2 { fields(first: 20) { nodes { ... on ProjectV2FieldCommon { id name } ... on ProjectV2SingleSelectField { id name options { id name }}}}}}}"}')
          echo $node
          field_id=$(echo $node | jq -r '.data.node.fields.nodes[2].id')
          echo $field_id
          option_id=$(echo $node | jq -r '.data.node.fields.nodes[2].options[1].id')
          echo $option_id
          curl --request POST \
            --url https://api.github.com/graphql \
            --header 'Authorization: Bearer ${{ secrets.ACCESS_PROJECT }}' \
            --data '{"query":"mutation {updateProjectV2ItemFieldValue( input: { projectId: \"'$project_id'\" itemId: \"'$item_id'\" fieldId: \"'$field_id'\" value: { singleSelectOptionId: \"'option_id'\" }}) { projectV2Item { id }}}"}'
        done
